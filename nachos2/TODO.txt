Just a text file for notes on what we have to do, and how to do it:

We need to implement these SYSCALLS:

// To be done for the first part of the project, by the deadline
SC_Halt		0
	- Given to us, yay!

// The next five are all file manipulation routines
SC_Create	4
	- one argument, the file name
	
SC_Open		5
	- same argument as create. Possibly we can implement a if its not open, create it?

SC_Read		6
	- Returns into a buffer a specified number of characters. Always returns at least one
	character. Will return the number of characters read

SC_Write	7
	- Writes a specified number of bytes from a buffer into the specified file

SC_Close	8
	- Closes the open file

SC_Fork		9
	- Takes a function as an argument

SC_Yield	10
	- Yield current thread to nother tread, doesn't matter if its in the 
	same address space

My thoughts on dividing work:
- Create, Open, and Close seem like a good set to be done by one person
- Read and Write will function similarly, though might be harder than the
first group
- Fork and Yield function similarly, but most likely will be harder. 

// We need to do some console work
- Need to create a SynchConsole class. There is the beginning of this implementation
	in progtest, but we might need to create a specific class more in tune with
	what the console needs to do. We should look into this and define this more

// To be done for the second part of the project
SC_Exit		1
SC_Exec		2
SC_Join		3
