OVERALL:

                        CS 444/544
         Nachos #2 (User Programs w/o Virtual Memory)
                         Fall 2014

#1 [25 pts] Support for a SINGLE user-mode program. No use of
   Exec/Exit/Join required. Your kernel is recompiled with the
   standard machine directory (numPhysPages is 32). The test
   source/data/binaries are in the test1 subdirectory of the
   Nachos2 grading directory.) I symbolically link to YOUR
   start.s.

   This is basically the set of checkpoint programs, plus a
   couple of bogus programs which cause errors that you should
   handle gracefully. These tests are invoked directly; no need
   for an operational shell.

a) [5 pts] Your performance on the checkpoint.

b) [2 pts] halt (To make sure that your implementation didn't break
   what you were given.)

c) [2 pts] hellocons (Simple output to the console).

d) [3 pts] fromcons (Read and echo console input until Q is typed).

e) [2 pts] hellofile (Simple output to file called hello.out).

f) [5 pts] fileio (Read/write a file.)

g) [3 pts] bogus1 (Deal with invalid address).

h) [3 pts] bogus2 (Deal with program which is too big for memory).

#2 [25 pts] Support for multiple user-mode programs. The value of
   numPhysPages is set to 1024 in machine/machine.h, and your kernel
   is recompiled. Note that the rest of the tests are done with 1024
   page frames of primary memory. (If necessary, I will crank up
   numPhysPages as far as it takes.)

   The test source/data/binaries are in the test2 subdirectory.

   Exec is invoked as Exec("file", NULL , 0), but you don’t need
   to have arguments or sharing to do the test2 stuff.

   Tests invoked directly; no need for the shell.

a) [6 pts] parent (parent Execs kid and Joins it upon Exit)

b) [2 pts] bogusexec1 (Exec a binary that is a text file.)

c) [1 pts] bogusexec2 (Exec a binary that does not exist.)

d) [1 pts] bogusexec3 (Exec valid binary, but too big to load.)

e) [3 pts] goodparent (Execs badkid who makes invalid reference.
   badkid should die. goodparent should do something reasonable,
   but it should not die.)

f) [3 pts] deepexec (deepexec Execs/Joins deepkid1; deepkid1 Execs/Joins
   deepkid2.)

g) [4 pts] maxexec (Exec/Join 15 copies of kid.)

h) [3 pts] atomicconsole (parent and child send groups of 20 letters
   to the console; should be no interleaving.)

i) [2 pts] badparent (parent doesn’t wait for kid.)

#3 [15 pts] Support for arguments with Exec() on the kernel
   compiled for #2. The test source/data/binaries are in the test3
   subdirectory of the Nachos2 grading directory. Your shell, cp,
   and cat binaries are copied into this directory.

a) [7 pts] argtest (argtest Execs/Joins argkid with two string args;
   argkid prints argv and exits).

b) [8 pts] YOUR cat and cp binaries run under your shell and doing
   normal cat and cp things with files.

#4 [10 pts] Support for shared file access. The test
   source/data/binaries are in the test4 subdirectory of the Nachos2
   grading directory.

a) [5 pts] share (share Execs/Joins sharekid after reading 20 bytes
   from a file it opens; sharekid reads 1 byte, closes the file, and
   exits; share then reads a single byte from the file).

b) [2 pts] noshare (as above, except parent doesn’t share opened
   file. sharekid can’t read from bogus file descriptor.)

c) [3 pts] atomicfile (as atomicconsole, but to a shared file).
